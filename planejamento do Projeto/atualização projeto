botI7D
Gem personalizado

Mostrar raciocínio
Entendido. Faremos a atualização do 'projeto0' para refletir esta mudança de foco. A estratégia de começar com o fluxo reativo principal usando o chat interno do n8n é excelente para validar a lógica central antes de integrar canais externos.

Com base nas suas instruções, gerei a seguinte atualização para o nosso prompt.

att (Atualização) 01: Foco no Fluxo Reativo Inicial via Chat n8n
Data da atualização: 17 de junho de 2025

Descrição das Modificações:

Escopo Inicial: O foco do desenvolvimento será exclusivamente no fluxo reativo, que lida com leads que iniciam a conversa (ex: vindos de anúncios Meta Ads). Os fluxos proativos, como o processo_cadencia_followup.n8n , e a leitura de planilhas (processo_leitura_sheets.n8n ) ficam adiados para uma fase futura.


Canal de Comunicação: Em vez do Telegram  ou WhatsApp, o canal de desenvolvimento e teste inicial será o Chat interno do n8n. O objetivo é criar um fluxo de conversação padronizado que possa ser facilmente adaptado posteriormente.
Estrutura de Dados de Entrada: A primeira etapa de qualquer fluxo de conversação será um nó "Set" chamado "dados principais". Este nó irá padronizar as informações da mensagem recebida, extraindo variáveis essenciais como numero_conversa, nome_cliente e conteudo_mensagem_text, conforme o JSON que você forneceu.
Impacto das Modificações no Projeto:

Plano de Implementação: A Fase 1 do projeto  é redefinida para "Desenvolvimento e Validação do Agente de Qualificação Reativo". O objetivo é ter um fluxo funcional que recebe uma mensagem no chat n8n, qualifica o lead e responde adequadamente.
Gatilho Principal: O workflow principal (01-hub-central.n8n) será iniciado por um gatilho do tipo "Chat Trigger" do n8n, em vez de um webhook de API externa.
Envio de Mensagens: A ferramenta subfluxo_tool_envio_mensagem.n8n  não será utilizada nesta fase. As respostas do agente serão enviadas de volta ao usuário através do próprio nó de Chat do n8n.
Novas Instruções e Considerações:

Primeiro Workflow a ser Construído: [I7D] 00 - Hub (ou 01-hub-central.n8n). 
Gatilho: Use o Chat Trigger.
Primeiro Nó: Implemente o nó Set ("dados principais") para padronizar os dados de entrada.
Roteamento: A lógica do orquestrador  será simplificada para, inicialmente, direcionar todas as novas conversas para o agente_qualificacao.

Foco do Agente: O desenvolvimento do agente_qualificacao.n8n deve seguir o fluxo de interação reativo descrito no escopo: apresentar o curso, entender o nível de inglês do lead e seu objetivo.


 (Atualização) 02: Detalhamento dos Agentes e Arquitetura RAG
Data da atualização: 18 de junho de 2025

Descrição das Modificações:
Esta atualização detalha a arquitetura e os prompts para os agentes especialistas de Preço, Agendamento e Consulta de Conhecimento, além de formalizar uma importante decisão de arquitetura para o sistema RAG.

1. Detalhamento de Novos Agentes Especialistas:

agente_tratamento_preco:

Propósito: Lidar com perguntas sobre preço, seguindo um roteiro estratégico para primeiro agregar valor antes de informar valores.
Lógica: O agente foi projetado com um prompt que o instrui a não fornecer o preço imediatamente, a oferecer materiais como vídeos de depoimentos e a só informar o valor sob insistência do lead, sempre ancorado por uma garantia.
agente_agendamento:

Propósito: Gerenciar o fluxo de agendamento de videoconferências.

Lógica Aprimorada: Inspirado em sistemas de referência, o prompt do agente foi atualizado para incluir um fluxo mais robusto:
Coleta de Dados: Verifica se nome e e-mail do lead já existem; caso contrário, solicita antes de prosseguir.
Verificação Estratégica: Analisa se o pedido do usuário é por um horário específico ou geral, otimizando a chamada à ferramenta.
Execução Segura (Anti-Conflito): Antes de criar o agendamento final, o agente fará uma última verificação de disponibilidade para aquele slot exato, evitando conflitos de agendamento.
Apresentação Formatada: Apresentará horários disponíveis e confirmações finais usando formatos de data e hora naturais e amigáveis (ex: "Quinta-feira, 18 de Junho, às 15:30").
2. Revisão da Arquitetura da Base de Conhecimento (RAG):

Decisão Arquitetural: Para garantir a separação de responsabilidades e a escalabilidade, foi decidido criar uma nova tabela dedicada exclusivamente para a Vector Store do RAG, em vez de usar a tabela genérica knowledge_base, que ficará responsável apenas por regras de negócio e configurações.
Nova Tabela (public.rag_knowledge_chunks):
Propósito: Armazenar os "chunks" (pedaços de texto) do manual do curso e seus respectivos vetores (embeddings).
Estrutura: A tabela contém colunas otimizadas para RAG, como content (para o texto) e embedding (para o vetor), além de um campo source_document para rastreabilidade.
Segurança: A tabela foi configurada com RLS (Row-Level Security) para permitir acesso apenas a usuários autenticados, seguindo o padrão de segurança do projeto.
Nova Função SQL (match_documents):
Propósito: Foi criada a função match_documents no banco de dados, um requisito do nó Supabase Vector Store do n8n para realizar buscas por similaridade de forma eficiente.
Atualização dos Workflows de Processo:
processo_update_rag.n8n: Este workflow agora é responsável por ler o documento de conhecimento, dividi-lo, criar os embeddings e salvar os dados na nova tabela rag_knowledge_chunks.
subfluxo_tool_consulta_rag.n8n: Esta ferramenta será construída para consultar a tabela rag_knowledge_chunks usando a função match_documents.
3. Próximos Passos Imediatos:

Banco de Dados: Executar o script SQL para criar a tabela rag_knowledge_chunks e a função match_documents.
Hub: Atualizar o nó Switch no workflow [I7D] 00 - Hub para incluir as rotas para agente_tratamento_preco e agente_agendamento.
Desenvolvimento:
Construir o workflow processo_update_rag.n8n para popular a base de conhecimento.
Construir a ferramenta subfluxo_tool_consulta_rag.n8n.
Construir o agente agente_consulta_conhecimento  que usará esta ferramenta.
